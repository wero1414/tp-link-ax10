#!/bin/sh

ESWCL=/bin/ethswctl
ETHCTL=/bin/ethctl
INSWITCH="regaccess"
OUSWITCH="pmdioaccess"

#dbg=1

DEBUG()
{
	[ -n "$dbg" ] && echo "$@" >/dev/console
}

# $1: the port num
# $2: the name of switch

ethswcl_get()
{
	if [ $1 == $INSWITCH ]
	then
		DEBUG "$ESWCL -c $1 -v $2 -l 2"
		$ESWCL -c $1 -v $2 -l 2
	else
		DEBUG "$ESWCL -c $1 -x $2 -l 2"
		$ESWCL -c $1 -x $2 -l 2
	fi
}

ethctl_get()
{
	DEBUG "$ETHCTL phy ext $1 0"
	$ETHCTL phy ext $1 0
}

ethctl_set()
{
	DEBUG "$ETHCTL phy ext $1 0"
	$ETHCTL phy ext $1 0 $2 no_read_back
}

ethctl_wan_get()
{
	DEBUG "$ETHCTL phy int $1 $2"
	$ETHCTL phy int $1 $2
}
# $1: the port num
# $2: the name of switch
# $3: the value you want set

ethswcl_set()
{
	if [ $1 == $INSWITCH ]
	then
		DEBUG "$ESWCL -c $1 -v $2 -l 2 -d $3"
		$ESWCL -c $1 -v $2 -l 2 -d $3
	else
		DEBUG "$ESWCL -c $1 -x $2 -l 2 -d $3"
		$ESWCL -c $1 -x $2 -l 2 -d $3
	fi 
}

ethctl_wan_set()
{
	DEBUG "$ETHCTL phy int $1 $2 $3"
	$ETHCTL phy int $1 $2 $3
}

# $1: which bit you want deal
# $2: the value

set_bit()
{
	echo $(($2 | (1 << $1)))
}

# $1: which bit you want deal
# $2: the value

clear_bit()
{
	echo $(($2 & (~(1 << $1))))	
}

# $1: the value you want get
# $2: the low or high part

get_16bits()
{
	local value=$(echo $1 | cut -d ' ' -f 3)
	echo ${value:4:4}
}


get_wan_16bits()
{
	local value=$(echo $1 | cut -d ' ' -f 5)
	echo ${value}
}

# $1: the port num you want deal
# $2: name of switch 

link_up_phy_port()
{
	local old_value=$(ethswcl_get $2 $1)
	old_value=$(get_16bits "$old_value")
	local old_value_low_16bits=$(echo "0x${old_value}")
	old_value_low_16bits=$(clear_bit 11 $old_value_low_16bits)
	ethswcl_set $2 $1 $old_value_low_16bits
}

# $1: the port num you want deal
# $2: name of switch 

link_down_phy_port()
{
	local old_value=$(ethswcl_get $2 $1)
	old_value=$(get_16bits "$old_value")
	local old_value_low_16bits=$(echo "0x${old_value}")
	old_value_low_16bits=$(set_bit 11 $old_value_low_16bits)
	ethswcl_set $2 $1 $old_value_low_16bits
}

link_down_wan_port() 
{
	local old_value=$(ethctl_wan_get 12 0)
	old_value=$(get_wan_16bits "$old_value")
	old_value=$(set_bit 11 $old_value)
	ethctl_wan_set 12 0 $old_value
}

# $1: number of port
# $2: name of switch 

link_up_all_phy_port()
{
	local index=0
	while [ $index -lt $1 ]
	do
		local port=$(echo "0x1${index}00")
		link_up_phy_port "$port" $2
		let index++
	done
}

# $1: number of port
# $2: name of switch 

link_down_all_phy_port()
{
	local index=0
	while [ $index -lt $1 ]
	do
		local port=$(echo "0x1${index}00")
		link_down_phy_port "$port" $2
		let index++
	done
}

#C4000 has 5 port 0-3,7(special port is 7)
link_down_special_phy_port()
{
	local old_value_low_16bits=$(ethctl_get $1 | awk '{print $5}')
	old_value_low_16bits=$(set_bit 11 $old_value_low_16bits)
	ethctl_set $1 $old_value_low_16bits
}

#C4000 has 5 port 0-3,7(special port is 7)
link_up_special_phy_port()
{
	local old_value_low_16bits=$(ethctl_get $1 | awk '{print $5}')
	old_value_low_16bits=$(clear_bit 11 $old_value_low_16bits)
	ethctl_set $1 $old_value_low_16bits
}

link_up_wan_port() 
{
	local old_value=$(ethctl_wan_get 12 0)
	old_value=$(get_wan_16bits "$old_value")
	old_value=$(clear_bit 11 $old_value)
	ethctl_wan_set 12 0 $old_value
}

#if [ $1 == "up" ]
#then
#	link_up_all_phy_port 4 "regaccess"
#	link_up_all_phy_port 4 "pmdioaccess"
#else
#	link_down_all_phy_port 4 "regaccess"
#	link_down_all_phy_port 4 "pmdioaccess"
#fi
