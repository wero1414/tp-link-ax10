#!/usr/bin/lua

local tmpv2 = require "tmpv2"
local json = require "luci.json"
local dbg = require "luci.tools.debug"
local uci  = require "luci.model.uci"
local script = require "sync-script"
local wlan  = require "luci.model.wireless"
local ubus = require "ubus"
local uci_r = uci.cursor()

local die = script.die
local finalize = script.finalize

local infile = arg[1]
local outfile = arg[2]
local opcode = arg[3]
local onemesh_list_devices = {}
local wifi_data = {}

local support_triband = uci_r:get_profile("wireless", "support_triband") or "no"
local support_fourband = uci_r:get_profile("wireless", "support_fourband") or "no"
local support_6g = uci_r:get_profile("wireless", "support_6g") or "no"

script.outfile = outfile

local function debug(str)
    --dbg.print("[Sync-server request] " .. str)
end

local function debug_tbl(tbl)
    --dbg.dumptable(tbl)
end

local function wireless_status_all(formvalue)
    local form = {}
    if support_fourband == "no" then
		if support_triband == "no" then
			form = {"wireless_2g", "wireless_5g"}
		else
			if support_6g == "no" then
				form = {"wireless_2g", "wireless_5g", "wireless_5g_2"}
			else
				form = {"wireless_2g", "wireless_5g", "wireless_6g"}
			end
		end   	
    else 
		form = {"wireless_2g", "wireless_5g", "wireless_5g_2", "wireless_6g"}
    end

    return wlan.Apcfg(form):read()
end

local function request(tmpcli, ip, mac)
    local wpa3_support=false
    debug("enter request(tmpcli),ip " .. ip .. ",mac " .. mac)
    debug_tbl(onemesh_list_devices)

    if not onemesh_list_devices or type(onemesh_list_devices) ~= "table" then
        wpa3_support=false
    else
        if not onemesh_list_devices[mac] or type(onemesh_list_devices[mac]) ~= "table" then
            wpa3_support=false
        else
            if not onemesh_list_devices[mac]["wpa3_support"] or 1 ~= onemesh_list_devices[mac]["wpa3_support"] then 
                wpa3_support=false
            else
                wpa3_support=true
            end
        end
    end

    debug_tbl(wifi_data)
    if wpa3_support == false then
        if wifi_data ~=nil and wifi_data["2.4G"] ~= nil then
            if wifi_data["2.4G"]["encryption"] == "psk_sae" then
				wifi_data["2.4G"]["encryption"] = "psk"
				wifi_data["2.4G"]["psk_version"] = "rsn"
				wifi_data["2.4G"]["psk_cipher"] = "aes"
			elseif wifi_data["2.4G"]["psk_version"] == "sae_transition" or wifi_data["2.4G"]["psk_version"] == "sae_only" then
				wifi_data["2.4G"]["psk_version"] = "rsn"
				wifi_data["2.4G"]["psk_cipher"] = "aes"
			end
        end
        if wifi_data ~=nil and wifi_data["5G"] ~= nil then
            if wifi_data["5G"]["encryption"] == "psk_sae" then
				wifi_data["5G"]["encryption"] = "psk"
				wifi_data["5G"]["psk_version"] = "rsn"
				wifi_data["5G"]["psk_cipher"] = "aes"
			elseif wifi_data["5G"]["psk_version"] == "sae_transition" or wifi_data["5G"]["psk_version"] == "sae_only" then
				wifi_data["5G"]["psk_version"] = "rsn"
				wifi_data["5G"]["psk_cipher"] = "aes"
			end
        end
		if wifi_data ~=nil and wifi_data["5G2"] ~= nil then
            if wifi_data["5G2"]["encryption"] == "psk_sae" then
				wifi_data["5G2"]["encryption"] = "psk"
				wifi_data["5G2"]["psk_version"] = "rsn"
				wifi_data["5G2"]["psk_cipher"] = "aes"
			elseif wifi_data["5G2"]["psk_version"] == "sae_transition" or wifi_data["5G2"]["psk_version"] == "sae_only" then
				wifi_data["5G2"]["psk_version"] = "rsn"
				wifi_data["5G2"]["psk_cipher"] = "aes"
			end
        end
        if wifi_data ~=nil and wifi_data["6G"] ~= nil then
			if wifi_data["6G"]["encryption"] == "psk_sae" then
				wifi_data["6G"]["encryption"] = "psk"
				wifi_data["6G"]["psk_version"] = "rsn"
				wifi_data["6G"]["psk_cipher"] = "aes"
			elseif wifi_data["6G"]["psk_version"] == "sae_transition" or wifi_data["6G"]["psk_version"] == "sae_only" then
				wifi_data["6G"]["psk_version"] = "rsn"
				wifi_data["6G"]["psk_cipher"] = "aes"
			end
        end
    end
    
    -- Fix Bug 302111 start
    if wifi_data ~=nil and wifi_data["2.4G"] ~= nil and wifi_data["2.4G"]["psk_cipher"] == "tkip" then
        wifi_data["2.4G"]["psk_cipher"] = "auto"        
    end
    if wifi_data ~=nil and wifi_data["5G"] ~= nil and wifi_data["5G"]["psk_cipher"] == "tkip" then
        wifi_data["5G"]["psk_cipher"] = "auto"      
    end
	if wifi_data ~=nil and wifi_data["5G2"] ~= nil and wifi_data["5G2"]["psk_cipher"] == "tkip" then
        wifi_data["5G2"]["psk_cipher"] = "auto"
    end
    -- Fix Bug 302111 end
    if wifi_data ~=nil and wifi_data["6G"] ~= nil and wifi_data["6G"]["psk_cipher"] == "tkip" then
        wifi_data["6G"]["psk_cipher"] = "auto"
    end

    if wifi_data ~=nil and wifi_data["2.4G"] ~= nil and wifi_data["2.4G"]["encryption"] ~= nil then 
        local wifi_msg = json.encode(wifi_data)
        debug(wifi_msg)

        os.remove(infile)
        local f = io.open(infile, "w")
        f:write(wifi_msg)
        f:close()
    end

    local data, msg = tmpcli:request(opcode, {infile = infile})
    if not data then
        return nil, msg
    end

    if nil ~= data then
        debug("[TPIPF] data is " .. data)
    else
        debug("[TPIPF] data is nil")
    end

    if nil ~= msg then
        debug("[TPIPF] msg is " .. msg)
    else
        debug("[TPIPF] msg is nil")
    end

    local data = json.decode(data)

    return true, data
end

local function main()
    if tonumber(opcode) then
        opcode = tonumber(opcode)
    end
    assert(opcode and infile and outfile, "invalid arguments")
    assert(#arg > 3, "invalid arguments")

    local _ubus = ubus.connect()
    onemesh_list_devices  = _ubus:call("tdpServer", "onemesh_list_devices", {})

    debug_tbl(onemesh_list_devices)
    --debug_tbl(onemesh_list_devices[arg[5]])
    --debug("=========== onemesh_list_devices[arg[5]][\"wpa3_support\"]) ======")
    --debug(onemesh_list_devices[arg[5]]["wpa3_support"])

    local status_all = wireless_status_all()
    if not status_all or type(status_all) ~= "table" then
        dbg.print("cannot get the wireless status")
		if support_fourband == "no" then
			if support_triband == "no" then
				status_all = {["wireless_2g_current_channel"]=-1, ["wireless_5g_current_channel"]=-1}
			else
				if support_6g == "no" then
					status_all = {["wireless_2g_current_channel"]=-1, ["wireless_5g_current_channel"]=-1, ["wireless_5g_2_current_channel"]=-1}
				else
					status_all = {["wireless_2g_current_channel"]=-1, ["wireless_5g_current_channel"]=-1, ["wireless_6g_current_channel"]=-1}
				end
			end
		else
			status_all = {["wireless_2g_current_channel"]=-1, ["wireless_5g_current_channel"]=-1, ["wireless_5g_2_current_channel"]=-1, ["wireless_6g_current_channel"]=-1}
		end
    end

    -- local usr = uci_r:get_profile("accountmgnt", "username")
    -- local pwd = uci_r:get_profile("accountmgnt", "password")
    local RE_2G = uci_r:get_profile("wireless", "wireless_mesh_ifname_2g") or "wl14"
    local RE_5G = uci_r:get_profile("wireless", "wireless_mesh_ifname_5g") or "wl04"
    local ifname_2g = uci_r:get_profile("wireless", "wireless_ifname_2g") or "wl11"
    local ifname_5g = uci_r:get_profile("wireless", "wireless_ifname_5g") or "wl01"
    local wifi_24g  = uci_r:get_all("wireless", ifname_2g)
    local wifi_5g   = uci_r:get_all("wireless", ifname_5g)
    local wifi_24g_disabled = uci_r:get("wireless", wifi_24g.device, "disabled") or "off"
    local wifi_5g_disabled = uci_r:get("wireless", wifi_5g.device, "disabled") or "off"
    local tmp1 = {
        ssid = wifi_24g.ssid,
        encryption = wifi_24g.encryption,
        psk_key = wifi_24g.psk_key or "12345678",
        psk_version = wifi_24g.psk_version,
        psk_cipher = wifi_24g.psk_cipher,
        wep_mode = wifi_24g.wep_mode,
        wep_format1 = wifi_24g.wep_format1,
        wep_type1 = wifi_24g.wep_type1,
        wep_key1 = wifi_24g.wep_key1 or "1234567890",
        -- channel  = uci_r:get_all("wireless", "wifi0", "channel"),
        channel = tonumber(status_all["wireless_2g_current_channel"]),
        enable   = (wifi_24g.enable == "on" and wifi_24g_disabled ~= "on") and 1 or 0,
        hide_ssid = (wifi_24g.hidden == "on") and 1 or 0,
        backhaul_ssid = uci_r:get_all("onemesh", RE_2G, "ssid"), -- 隐藏backhaul SSID
        backhaul_key  = uci_r:get_all("onemesh", RE_2G, "psk_key")   -- 隐藏backhaul 密码
    }
    local tmp2 = {
        ssid = wifi_5g.ssid,
        encryption = wifi_5g.encryption,
        psk_key = wifi_5g.psk_key or "12345678",
        psk_version = wifi_5g.psk_version,
        psk_cipher = wifi_5g.psk_cipher,
        wep_mode = wifi_5g.wep_mode,
        wep_format1 = wifi_5g.wep_format1,
        wep_type1 = wifi_5g.wep_type1,
        wep_key1 = wifi_5g.wep_key1 or "1234567890",
        -- channel  = uci_r:get_all("wireless", "wifi1", "channel"),
        channel = tonumber(status_all["wireless_5g_current_channel"]),
        enable   = (wifi_5g.enable == "on" and wifi_5g_disabled ~= "on") and 1 or 0,
        hide_ssid = (wifi_5g.hidden == "on") and 1 or 0,
        backhaul_ssid = uci_r:get_all("onemesh", RE_5G, "ssid"),  -- 隐藏backhaul SSID
        backhaul_key  = uci_r:get_all("onemesh", RE_5G, "psk_key") -- 隐藏backhaul 密码
    }
    wifi_data["2.4G"] = tmp1
    wifi_data["5G"]   = tmp2

	-- NOTE: add for triband or fourband
	if support_fourband == "yes" or (support_triband == "yes" and support_6g == "no") then
		local RE_5G2 = uci_r:get_profile("wireless", "wireless_mesh_ifname_5g_2") or "wl24"
		local ifname_5g2 = uci_r:get_profile("wireless", "wireless_ifname_5g_2") or "wl21"
		local wifi_5g2 = {}
		local tmp3 = {}
		wifi_5g2   = uci_r:get_all("wireless", ifname_5g2)
		local wifi_5g2_disabled = uci_r:get("wireless", wifi_5g2.device, "disabled") or "off"
		tmp3 = {
			ssid = wifi_5g2.ssid,
			encryption = wifi_5g2.encryption,
			psk_key = wifi_5g2.psk_key or "12345678",
			psk_version = wifi_5g2.psk_version,
			psk_cipher = wifi_5g2.psk_cipher,
			wep_mode = wifi_5g2.wep_mode,
			wep_format1 = wifi_5g2.wep_format1,
			wep_type1 = wifi_5g2.wep_type1,
			wep_key1 = wifi_5g2.wep_key1 or "1234567890",
			-- channel  = uci_r:get_all("wireless", "wifi0", "channel"),
			channel = tonumber(status_all["wireless_5g_2_current_channel"]),
			enable   = (wifi_5g2.enable == "on" and wifi_5g2_disabled ~= "on") and 1 or 0,
			hide_ssid = (wifi_5g2.hidden == "on") and 1 or 0,
			backhaul_ssid = uci_r:get_all("onemesh", RE_5G2, "ssid"), -- 隐藏backhaul SSID
			backhaul_key  = uci_r:get_all("onemesh", RE_5G2, "psk_key")   -- 隐藏backhaul 密码
		}
		wifi_data["5G2"] = tmp3
	end
	-- NOTE: add for triband or fourband
	if support_fourband == "yes" or (support_triband == "yes" and support_6g == "yes") then
		local RE_6G = uci_r:get_profile("wireless", "wireless_mesh_ifname_6g") or "wl04"
		local ifname_6g = uci_r:get_profile("wireless", "wireless_ifname_6g") or "wl01"
		local wifi_6g = uci_r:get_all("wireless", ifname_6g)
		local wifi_6g_disabled = uci_r:get("wireless", wifi_6g.device, "disabled") or "off"
		local tmp4 = {
			ssid = wifi_6g.ssid,
			encryption = wifi_6g.encryption,
			psk_key = wifi_6g.psk_key or "12345678",
			psk_version = wifi_6g.psk_version,
			psk_cipher = wifi_6g.psk_cipher,
			wep_mode = wifi_6g.wep_mode,
			wep_format1 = wifi_6g.wep_format1,
			wep_type1 = wifi_6g.wep_type1,
			wep_key1 = wifi_6g.wep_key1 or "1234567890",
			channel = tonumber(status_all["wireless_6g_current_channel"]),
			enable   = (wifi_6g.enable == "on" and wifi_6g_disabled ~= "on") and 1 or 0,
			hide_ssid = (wifi_6g.hidden == "on") and 1 or 0,
			backhaul_ssid = uci_r:get_all("onemesh", RE_6G, "ssid"),  -- 隐藏backhaul SSID
			backhaul_key  = uci_r:get_all("onemesh", RE_6G, "psk_key") -- 隐藏backhaul 密码
		}
		wifi_data["6G"] = tmp4
	end
   
    local wifi_msg = json.encode(wifi_data)
    --dbg.print(wifi_msg)

    os.remove(infile)
    local f = io.open(infile, "w")
    f:write(wifi_msg)
    f:close()


    -- local uci_r = uci.cursor()
    -- local usr = uci_r:get_profile("accountmgnt", "username")
    -- local pwd = uci_r:get_profile("accountmgnt", "password")

    local data = script.reduce_concurrent(request, nil, nil, arg, 4, #arg)
    finalize(data)
end

debug("========================= /sync-server/trans_main_wcfg ==============================")
debug("Prog " .. arg[0])
debug("Infile " .. arg[1])
debug("Outfile " .. arg[2])
debug("Opcode " .. arg[3])
debug("IP " .. arg[4])
debug("Mac " .. arg[5])
if nil ~= arg[6] then
    debug("IP " .. arg[6])
end
if nil ~= arg[7] then
    debug("Mac " .. arg[7])
end
if nil ~= arg[8] then
    debug("IP " .. arg[8])
end
if nil ~= arg[9] then
    debug("Mac " .. arg[9])
end
debug("========================= /sync-server/trans_main_wcfg end ==========================")

script.run(main)
