#!/bin/sh

. /lib/functions.sh
IFNAME=$1
CMD=$2

#echo "wps-supplicant-event: ifname=$IFNAME  event=$CMD" > /dev/console

is_section_ifname() {
	local config=$1
	local ifname
	config_get ifname "$config" ifname
	[ "${ifname}" = "$2" ] && eval "$3=$config"
}

# Obtain the named configuration value in the supplicant config file,
# stripping off any double quotes.
#
# Return the value in the config_val global variable.
get_config_val() {
	local conf=$1
	local key=$2

	# This finds the last key in the supplicant config and strips off leading
	# and trailing quotes (if it has them).
	#
	# Note that it uses a leading space to ensure that only an exact match
	# on the key is used.
	config_val=$(awk "BEGIN{FS=\"=\"} /[[:space:]]${key}=/ {print \$0}" $conf |grep "${key}=" |tail -n 1 | cut -f 2 -d= | sed -e 's/^"\(.*\)"/\1/')
}

get_ssid() {
	local conf=$1

	get_config_val $conf 'ssid'
	ssid=${config_val}
}

get_wpa_version() {
	local conf=$1

	local proto_key_str
	get_config_val $conf 'proto'
	proto_key_str="${config_val}"

	get_config_val $conf 'key_mgmt'
	proto_key_str="${proto_key_str} ${config_val}"

	case "${proto_key_str}" in
		"RSN WPA-PSK")
			wpa_version="WPA2-PSK"
			;;

		"WPA WPA-PSK")
			wpa_version="WPA-PSK"
			;;

		"RSN WPA-PSK SAE")
			wpa_version="WPA3-PSK"
			;;

		"RSN SAE")
			wpa_version="WPA3-SAE"
			;;

		# Since the proto key does not appear when no encryption
		# is being used, we need to match against all possible
		# combinations since the proto might have been extracted
		# from a previous network section.
		" NONE"|"RSN NONE"|"WPA NONE")
			wpa_version="NONE"
			;;
	esac
}

get_psk() {
	local conf=$1

	get_config_val $conf 'psk'
	psk=${config_val}
}


wps_pbc_multiap_overwrite_sta_network() {
	local ifname_overwrite=$1
	local ssid_overwrite=$2
	local auth_overwrite=$3
	local key_overwrite=
	local key_overwrite_len=
	local nw=

	[ "${auth_overwrite}" = "WPA3-SAE" -o "${auth_overwrite}" = "WPA3-PSK" -o "${auth_overwrite}" = "WPA2-PSK" -o "${auth_overwrite}" = "WPA-PSK" ] && {
		key_overwrite=$4
		key_overwrite_len=${#key_overwrite}
	}

	if [ -r /var/run/${ifname_overwrite}_wpa_supplicant ]; then
		wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant remove_network all
		nw=`wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant add_network | cut -d ' ' -f 4`
		wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw ssid \"${ssid_overwrite}\"
		wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw scan_ssid 1
		wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw multi_ap_backhaul_sta 1
		wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw multi_ap_profile 2
		case $auth_overwrite in
			WPA3-SAE)
				wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw key_mgmt SAE
				wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw ieee80211w 2
				wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw sae 1
				wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw auth_alg OPEN
				wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw pairwise CCMP
				wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw proto RSN
				if [ $key_overwrite_len -eq 64 ]; then
					wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw psk ${key_overwrite}
				else
					wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw psk \"${key_overwrite}\"
				fi
			;;
			WPA3-PSK)
				wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw key_mgmt WPA-PSK SAE
				wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw ieee80211w 1
				wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw sae 1
				wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw auth_alg OPEN
				wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw pairwise CCMP
				wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw proto RSN
				if [ $key_overwrite_len -eq 64 ]; then
					wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw psk ${key_overwrite}
				else
					wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw psk \"${key_overwrite}\"
				fi
			;;
			WPA2-PSK)
				wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw key_mgmt WPA-PSK
				wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw auth_alg OPEN
				wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw pairwise CCMP
				wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw proto RSN
				if [ $key_overwrite_len -eq 64 ]; then
					wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw psk ${key_overwrite}
				else
					wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw psk \"${key_overwrite}\"
				fi
			;;
			WPA-PSK)
				wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw key_mgmt WPA-PSK
				wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw auth_alg OPEN
				wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw pairwise TKIP
				wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw proto WPA
				if [ $key_overwrite_len -eq 64 ]; then
					wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw psk ${key_overwrite}
				else
					wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw psk \"${key_overwrite}\"
				fi
			;;
			NONE)
				wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant set_network $nw key_mgmt NONE
			;;
		esac
		wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant enable_network $nw
		wpa_cli -p /var/run/${ifname_overwrite}_wpa_supplicant save_config
	fi
}

sect=
psk=
ssid=
wpa_version=
IFNAME_OVERWRITE_AP=
IFNAME_OVERWRITE_STA=
wps_pbc_enhc_file=/var/run/wifi-wps-enhc-extn.conf
config_load wireless

case "$CMD" in
	WPS-PBC-ACTIVE)
		ubus call meshd wps_event '{"ifname":"'$IFNAME'","action":"wps-pbc"}'
		;;
	WPS-SUCCESS)
		ubus call meshd wps_event '{"ifname":"'$IFNAME'","action":"wps-success"}'
		get_ssid /var/${IFNAME}_wpa_supplicant.conf
		get_wpa_version /var/${IFNAME}_wpa_supplicant.conf
		get_psk /var/${IFNAME}_wpa_supplicant.conf
		IFNAME_STA="wl0 wl1"
		config_foreach is_section_ifname wifi-iface $IFNAME sect
		if [ "$ssid" != "$(uci get wireless.${sect}.ssid)" -o "$psk" != "$(uci get wireless.${sect}.psk_key)" ]; then
			for intf in $IFNAME_STA; do
				[ "$IFNAME" != "$intf" ] && wps_pbc_multiap_overwrite_sta_network $intf $ssid $wpa_version $psk
			done
		fi
		;;
	CONNECTED)
		kill "$(cat "/var/run/${IFNAME}_wpa_supplicant_event.pid")"
		;;
	WPS-TIMEOUT)
		kill "$(cat "/var/run/${IFNAME}_wpa_supplicant_event.pid")"
		ubus call meshd wps_event '{"ifname":"'$IFNAME'","action":"wps-timeout"}'
		;;
	WPS-FAIL)
		kill "$(cat "/var/run/${IFNAME}_wpa_supplicant_event.pid")"
		ubus call meshd wps_event '{"ifname":"'$IFNAME'","action":"wps-fail"}'
		;;
	WPS-CANCEL)
		kill "$(cat "/var/run/${IFNAME}_wpa_supplicant_event.pid")"
		ubus call meshd wps_event '{"ifname":"'$IFNAME'","action":"wps-cancel"}'
		;;
	DISCONNECTED)
		;;
esac

