#!/usr/bin/lua

local clientmgmt    = require "luci.model.client_mgmt"
local uci           = require "luci.model.uci"
local dbg           = require "luci.tools.debug"
local status        = require "luci.tools.status"
local sys           = require "luci.sys"

local config = "hosts"
local TEMP_UCI_PATH = "/tmp/tr069/"
local uci_t = uci.cursor(TEMP_UCI_PATH)
local uci_r = uci.cursor()
local info = {}
info.count = 0

local lease_list = status.dhcp_leases()
local client_list = clientmgmt.get_client_list_dev()
local WIRELESS_2G_MAIN_VAP = uci_r:get_profile("wireless", "wireless_ifname_2g") or "wl11"
local WIRELESS_2G_MAIN_DEV = uci_r:get("wireless", WIRELESS_2G_MAIN_VAP, "ifname") or "wl1"
local WIRELESS_2G_GUEST_DEV = uci_r:get_profile("wireless", "wireless_guest_ifname_2g") or "wl1.1"
local WIRELESS_5G_MAIN_VAP = uci_r:get_profile("wireless", "wireless_ifname_5g") or "wl01"
local WIRELESS_5G_MAIN_DEV = uci_r:get("wireless", WIRELESS_5G_MAIN_VAP, "ifname") or "wl0"
local WIRELESS_5G_GUEST_DEV = uci_r:get_profile("wireless", "wireless_guest_ifname_5g") or "wl0.1"

sys.call("mkdir -p " .. TEMP_UCI_PATH)
sys.call("touch " .. TEMP_UCI_PATH .. config)   

for i, v in ipairs(client_list) do
    client={}
    
    if v.mac then
        client.mac = (v.mac):gsub("-", ":"):upper() 
    end

    if v.ip then
        client.ip = v.ip
    end

    client.active = "1"

    if v.wire_type == "wired" then
        client.iftype = "Ethernet"
        client.lay2if = "eth0"
    elseif v.wire_type == "2.4G" then
        client.iftype = "802.11"
        if v.guest == "NON_GUEST" then
            client.lay2if = WIRELESS_2G_MAIN_DEV
        else
            client.lay2if = WIRELESS_2G_GUEST_DEV
        end
    elseif v.wire_type == "5G" then
        client.iftype = "802.11"
        if v.guest == "NON_GUEST" then
            client.lay2if = WIRELESS_5G_MAIN_DEV
        else
            client.lay2if = WIRELESS_5G_GUEST_DEV
        end
    else
        client.iftype = "Other"
    end

    client.hostname = v.hostname

    client.addresssource = "Static"

    client.lease_remain = "0"
    
    for _, lease in ipairs(lease_list) do
        if lease.macaddr:upper() == client.mac then
            client.addresssource = "DHCP"
            client.lease_remain = tostring(lease.expires)
        end
    end

    uci_t:section(config, "client", i, client)
    info.count = info.count + 1
end

uci_t:section(config, "global", "info", info)
uci_t:commit_without_write_flash(config)

