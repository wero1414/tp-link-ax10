#!/usr/bin/lua

local uci   = require "luci.model.uci"
local json  = require "luci.json"
local sys   = require "luci.sys"
local nixio = require "nixio"
local uci_r = uci.cursor()  
local uci_t = uci.cursor_state()
local schedule_mgmt = require "luci.model.modify_schedule_list"
local schedule_client_file = "/var/run/schedule_client"
local smart_home_upload = require "cloud.smart_home.smart_home_upload"
local cause = smart_home_upload.VOICE

local debug_on = false
local dbg
if debug_on then
	dbg = require "luci.tools.debug"
else
	dbg = function(...) end
end

local function is_ntp_ok()
	local ntp_flag = uci_t:get("systime", "core", "sync")
	if ntp_flag == "1" then
		dbg("NTP is ready")
		return true
	else
		dbg("NTP is NOT ready yet")
		return false
	end

end

local function extend_mac(mac)
    local result = ""
    for i=1, #mac do
        result = result .. string.sub(mac, i, i)
        if i % 2 == 0 and i ~= #mac then
            result = result .. ':'
        end
    end
    return result
end

local function set_wifi_pause(maclist_sh, first_time_check)
	dbg("set_wifi_pause for maclist")
	dbg("maclist_sh:%s" % json.encode(maclist_sh))

	if not first_time_check then
		os.execute("iptables -N pauselist")
		os.execute("iptables -D FORWARD -j pauselist")
		os.execute("iptables -I FORWARD 2 -j pauselist")
		os.execute("iptables -D input_rule -j pauselist")
		os.execute("iptables -I input_rule 1 -j pauselist")
		os.execute("iptables -F pauselist")
	end

	if maclist_sh == nil then
		return
	end

	for _, mac in pairs(maclist_sh) do
		local wan_ifname, wan_ifname_internet, wan_ifname_iptv
		wan_ifname = uci_r:get("network", "wan", "ifname")
		if wan_ifname then
			cmd = "iptables -A pauselist -i br-lan -o "..wan_ifname.." -m mac --mac-source " .. mac .. " -j DROP"
			os.execute(cmd)
		end
		--get pppoe, l2tp, pptp wan's name
		wan_ifname_internet = uci_t:get("network", "internet", "ifname")
		if wan_ifname_internet and wan_ifname_internet ~= wan_ifname then
			cmd = "iptables -A pauselist -i br-lan -o "..wan_ifname_internet.." -m mac --mac-source " .. mac .. " -j DROP"
			os.execute(cmd)
		end
		--get iptv wan's name
		wan_ifname_iptv = uci_t:get("network", "wan", "ifname")
		if wan_ifname_iptv and wan_ifname_iptv ~= wan_ifname then
			cmd = "iptables -A pauselist -i br-lan -o "..wan_ifname_iptv.." -m mac --mac-source " .. mac .. " -j DROP"
			os.execute(cmd)
		end
		
		local model = uci_r:get_profile("global", "model") or ""
		if model == "QCA_IPQ50XX" or model == "QCA_IPQ95XX" then
			-- QCA
			os.execute("conntrack -F")
		else
			-- BCM
			cmd = "cat /proc/net/arp |grep -i " .. mac .. " | awk '{ print $1 }'"
			local ip = (sys.exec(cmd)):trim()
			if ip and ip ~= "" then
				--os.execute("conntrack -D -s " .. tostring(ip))
				--os.execute("conntrack -D -d " .. tostring(ip))
				--only for bcm fcache now
				dbg("fc flush --mac %s" % json.encode(mac))
				os.execute("fc flush --mac " .. tostring(mac))
				os.execute("ip neigh del " .. tostring(ip) .. " dev br-lan")
				--os.execute("ip neigh del " .. tostring(ip) .. " dev br-guest")
			end
		end
	end
end

local function mac_in_pauselist(mac, pauselist)

	if mac == nil or pauselist == nil then
		return false
	end

	local found = string.find(pauselist, mac)
	if found then
		return true
	else
		return false
	end

end

local function call_new_schedule(delay)
	local PID_FILE = "/var/run/smart_home_schedule.pid"
	local command = "sleep %d;/usr/sbin/smart_home_schedule;rm %s" % {tonumber(delay), PID_FILE}
	if delay == nil or tonumber(delay) == nil then
		return
	end

	if nixio.fs.access(PID_FILE) then
		return
	end
	os.execute("echo %d > %s" % {tonumber(delay), PID_FILE})
	sys.fork_exec(command)
end

local function check_system_upgrade_time()
	local system = {}
	system.lastFwUpdateTime = uci_r:get("smart_home", "system", "lastFwUpdateTime")
	system.needUpload = uci_r:get("smart_home", "system", "needUpload")
	local needCommit = false

	if system.needUpload and system.needUpload == "no" then
		return
	end

	if not system.lastFwUpdateTime then
		dbg("generate lastFwUpdateTime...")
		system.lastFwUpdateTime = os.time()
		system.needUpload = "yes"
	end

	if system.needUpload and system.needUpload == "yes" then
		smart_home_upload.upload_property_change("system", cause)
		system.needUpload = "no"
		needCommit = true
	end

	if needCommit then
        uci_r:section("smart_home", "system", "system", system)
		uci_r:commit("smart_home")
	end
end

local function main()

	local maclist_sh = {} -- maclist for smart_home
	local maclist_all = {} -- maclist for all
	local black_list_changed = {} -- maclist for whose status change, need to upload
	local status_change = false
	local forever = 0
	local first_time_check = false
	local exec = false
	local duty_check = false
	local delay = 60
	local need_update_file = false

	if arg[1] ~= nil and arg[1] == "first" then
		first_time_check = true
	elseif arg[1] ~= nil and arg[1] == "exec" then
		exec = true
	else
		duty_check = true
	end

	local ntp_ok = is_ntp_ok()
	if first_time_check == false and ntp_ok == false then
		delay = 15
		call_new_schedule(delay)
		return
	end

	local cur_time = tonumber((sys.exec("date +%s")):trim())
	--local support_mode = require "luci.model.mode"
	--if not support_mode.is_smart_home_support() then
	--	return
	--end
    	local smart_home_support = uci_r:get_profile("smart_home", "support") or "no"
    	if smart_home_support and smart_home_support ~= "yes" then
    		return
    	end

	local pauselist = nil
	local fd = io.popen("iptables -L pauselist")
	if fd == nil then
		dbg("fail to get pauselist")
		return
	else
		pauselist = fd:read("*all")
		io.close(fd)
	end

	if pauselist == nil or pauselist == "" then
		dbg("no pauselist")
		return
	end

	dbg("smart_home_schedule get cur_time:%s" % json.encode(cur_time))
	if first_time_check then
		need_update_file = true
		dbg("first time load... read info from smart_home config")
		status_change = false
		uci_r:foreach("smart_home", "client",
			function(section)               
				local mac = (section.mac):gsub("-", ":"):upper()
				mac = extend_mac(mac)
				local item = {}
				item.mac = section[".name"]
				local in_pauselist = mac_in_pauselist(mac, pauselist)

				dbg(section.mac .. " is smart_home_schedule client")
				local start_time = tonumber(section.start_time)
				local stop_time = tonumber(section.stop_time)
				item.start_time = start_time
				item.stop_time = stop_time
				if (start_time <= cur_time and cur_time < stop_time) or
					(start_time <= cur_time and stop_time == forever) then
					dbg("time is VALID...")
					if section.pause == "1" then
						dbg("pause " .. section.mac)
						item.cfg_block = true -- pause
					else
						dbg("unpause " .. section.mac)
						item.cfg_block = false -- unpause
					end

					-- if time is valid, block statu shoule = config block state
					item.block = item.cfg_block

					if ntp_ok == false and start_time ~= forever and stop_time ~= forever then
						item.block = in_pauselist
					end

					if item.block ~= in_pauselist then
						status_change = true
					end
				else
					dbg("time is INVALID...")
					if section.pause == "1" then
						dbg("unpause " .. section.mac)
						item.cfg_block = true
					else
						dbg("pause " .. section.mac)
						item.cfg_block = false
					end

					-- if time is invalid, block statu shoule ~= config block state
					item.block = not item.cfg_block

					if ntp_ok == false and start_time ~= forever and stop_time ~= forever then
						item.block = in_pauselist
					end

					if item.block == in_pauselist then
						status_change = true
					end

				end

				if item.block == true then
					table.insert(maclist_sh, mac)
				end

				if status_change then
					black_list_changed[#black_list_changed+1]={clientMac=section[".name"]}
				end

				maclist_all[#maclist_all+1] = item

				if stop_time > cur_time and stop_time - cur_time < delay then
					delay = tonumber(stop_time - cur_time)
				end

			end
		)

	elseif exec == true then
		dbg("JUST DO IT...")
		maclist_all = schedule_mgmt.read_schedule_runtime_file(schedule_client_file)
		status_change = true
		dbg("maclist_all:%s" % json.encode(maclist_all))

		if maclist_all == nil then
			maclist_all = {}
		end

		for _, item in pairs(maclist_all) do
			if item.block == true then
				table.insert(maclist_sh, extend_mac(item.mac))
			end

			local stop_time = item.stop_time
			if stop_time > cur_time and stop_time - cur_time < delay then
				delay = tonumber(stop_time - cur_time)
			end
		end
	elseif duty_check == true then
		dbg("duty check...")
		maclist_all = schedule_mgmt.read_schedule_runtime_file(schedule_client_file)

		dbg("get maclist_all:%s" % json.encode(maclist_all))
		if maclist_all == nil then
			maclist_all = {}
		end

		for _, item in pairs(maclist_all) do
			status_change = false
			local start_time = tonumber(item.start_time)
			local stop_time = tonumber(item.stop_time)
			dbg("item:%s" % json.encode(item))
			local mac = extend_mac(item.mac)
			local in_pauselist = mac_in_pauselist(mac, pauselist)

			if (start_time <= cur_time and cur_time < stop_time) or
				(start_time <= cur_time and stop_time == forever) then
				dbg("time is VALID...")
				if item.block ~= item.cfg_block then
					dbg(mac .. " should revert status...")
					status_change = true
					item.block = item.cfg_block
				else
					dbg(mac .. " should keep status...")
				end
			else
				dbg("time is INVALID")
				if item.block == item.cfg_block then
					dbg(mac .. " should revert status...")
					status_change = true
					item.block = not item.cfg_block
				else
					dbg(mac .. " should keep status...")
				end

			end

			if item.block == true then
				table.insert(maclist_sh, mac)
			end

			if stop_time > cur_time and stop_time - cur_time < delay then
				delay = tonumber(stop_time - cur_time)
			end

			if status_change then
				black_list_changed[#black_list_changed+1]={clientMac=item.mac}
				need_update_file = true
			end
		end
	end

	if need_update_file then
		schedule_mgmt.update_schedule_runtime_file(maclist_all)
	end
	
	dbg("status_change:%s" % json.encode(status_change))
    if (black_list_changed and #black_list_changed > 0) or exec == true then
		set_wifi_pause(maclist_sh, first_time_check)
		dbg("smart_home_schedule black_list_changed:%s" % json.encode(black_list_changed))
		if duty_check == true then
			smart_home_upload.upload_property_change_client("networkPermission", cause, black_list_changed)
		else
			dbg("Don't upload black_list_changed this time...")
		end
    end

	if delay < 59 then
		call_new_schedule(delay)
	end

	if ntp_ok then
		check_system_upgrade_time()
	end

end

main()


