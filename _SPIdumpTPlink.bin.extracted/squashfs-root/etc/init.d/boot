#!/bin/sh /etc/rc.common
# Copyright (c) 2013 The Linux Foundation. All rights reserved.
# Copyright (C) 2006-2011 OpenWrt.org

START=10
STOP=98

system_config() {
	local cfg="$1"

	local hostname conloglevel timezone

	config_get hostname "$cfg" hostname 'OpenWrt'
	echo "$hostname" > /proc/sys/kernel/hostname

	config_get conloglevel "$cfg" conloglevel
	config_get buffersize "$cfg" buffersize
	[ -z "$conloglevel" -a -z "$buffersize" ] || dmesg ${conloglevel:+-n $conloglevel} ${buffersize:+-s $buffersize}

	config_get timezone "$cfg" timezone 'UTC'
	echo "$timezone" > /tmp/TZ

	config_get zonename "$cfg" zonename
	[ -n "$zonename" ] && [ -f "/usr/share/zoneinfo/$zonename" ] && ln -s "/usr/share/zoneinfo/$zonename" /tmp/localtime

	# apply timezone to kernel
	date -k

	# Start logd
	[ -x /etc/init.d/logd ] && /etc/init.d/logd start

	if [ -x /sbin/klogd ]; then
		config_get klogconloglevel "$cfg" klogconloglevel
		args="${klogconloglevel:+-c $klogconloglevel}"
		service_start /sbin/klogd $args
	fi
}

apply_uci_config() {
	sh -c '. /lib/functions.sh; include /lib/config; uci_apply_defaults'
}

#agile config reload logo and favicon
agile_config_replace_logo() {
	echo "agile config reload favicon and logo start!"
	local agile_config_Path="/www/webpages/themes/default/img/logo"
	local iconsName="icons.tar"
	local faviconName="favicon.ico"
	local logoName="logo-icon.png"
	#read partition file
	nvrammanager -r /tmp/$iconsName -p icons
	[ -s /tmp/$iconsName ] && {
		cd /tmp
		tar -xzf /tmp/$iconsName
	}

	#modify the config, agile config won't be set repeatedly
	if [ -s /tmp/$faviconName -o -s /tmp/$logoName ];then
		uci set factory.agileconfig.enable="no"
		uci commit
	fi
	
	#replace factory logo and favicon
	[ -d $agile_config_Path ] && chmod 775  $agile_config_Path
	[ -s /tmp/tmp/$faviconName ] && mv /tmp/tmp/$faviconName $agile_config_Path
	[ -s /tmp/tmp/$logoName ] && cp /tmp/tmp/$logoName $agile_config_Path/tp_logo.png
	[ -s /tmp/tmp/$logoName ] && mv /tmp/tmp/$logoName $agile_config_Path/tp_logo_white.png
	#delete unused file
	[ -d /tmp/tmp ] && rm -rf /tmp/tmp/
	#[ -f /tmp/tmp/$faviconName ] && rm -f /tmp/tmp/$faviconName
	#[ -f /tmp/tmp/$logoName ] && rm -f /tmp/tmp/$logoName
	echo "agile config reload favicon and logo end!"
}

start() {
	[ -f /proc/mounts ] || /sbin/mount_root
	[ -f /proc/jffs2_bbc ] && echo "S" > /proc/jffs2_bbc
	[ -f /proc/net/vlan/config ] && vconfig set_name_type DEV_PLUS_VID_NO_PAD

	mkdir -p /var/run
	mkdir -p /var/log
	mkdir -p /var/lock
	mkdir -p /var/state
	mkdir -p /tmp/.uci
	chmod 0700 /tmp/.uci
	touch /var/log/wtmp
	touch /var/log/lastlog
	touch /tmp/resolv.conf.auto
	ln -sf /tmp/resolv.conf.auto /tmp/resolv.conf
	grep -q debugfs /proc/filesystems && mount -t debugfs debugfs /sys/kernel/debug
	[ "$FAILSAFE" = "true" ] && touch /tmp/.failsafe
	[ -d  /storage ] && mount -t jffs2 mtd:storage /storage
	[ -d  /data ] && mount -t jffs2 mtd:data /data
	#/etc/tp_data.sh mount_tpdata

	load_modules "$(ls /etc/modules.d/* | grep -v -e 33-qca-wifi-* -e button-poll)"

	# allow wifi modules time to settle
	# sleep 1

	#[ "$(/sbin/is_cal)" = "true" ] || {
	#	/sbin/wifi default > /tmp/wireless.tmp
	#	[ -s /tmp/wireless.tmp ] && {
	#		cat /tmp/wireless.tmp >> /etc/config/wireless
	#	}
	#	rm -f /tmp/wireless.tmp
	#}
	/sbin/sound detect > /tmp/sound.tmp
	[ -s /tmp/sound.tmp ] && {
		cat /tmp/sound.tmp >> /etc/config/sound
	}
	rm -f /tmp/sound.tmp
	
	apply_uci_config
	config_load system
	config_foreach system_config system

	echo "-------------------------------------------------------------------------------------" >/dev/console
	loadprofile >/dev/console 2>&1
	echo "-------------------------------------------------------------------------------------" >/dev/console 2>&1

	## prepare tmp partition
	echo "-------------------------------------------------------------------------------------" >/dev/console
	#MTDDEV=$(grep rootfs_data /proc/mtd | cut -d ":" -f1)
	#mkdir /tmp/mnt >/dev/console 2>&1
	#mount -t jffs2 $MTDDEV /tmp/mnt >/dev/console 2>&1
	loadconfig >/dev/console 2>&1
	echo "-------------------------------------------------------------------------------------" >/dev/console 2>&1
	echo "-------------------------------------------------------------------------------------" >/dev/console

	### easymesh/onemesh2.0 re
	local mode=$(uci get sysmode.sysmode.mode)
	local support_easymesh=$(uci get profile.@onemesh[0].easymesh_support -c "/etc/profile.d" -q)
	local support_onemesh2=$(uci get profile.@onemesh[0].onemesh2_support -c "/etc/profile.d" -q)

	if [ "$support_easymesh" == "yes" -o "$support_onemesh2" == "yes" ]; then
		if [ "$mode" == "repeater" ]; then
			echo "[EasyMesh/OneMesh2.0]: Repeater use AP webpages, modify navigator..." > /dev/console
			mount --bind /www/webpages/config/navigator.re.json /www/webpages/config/navigator.ap.json
			mount --bind /www/webpages/config/navigator.re.json /www/webpages/config/navigator.ap.ru.json

			local pwd=$(uci get accountmgnt.admin.password)
			if [ -z "$pwd" ]; then
				pwd=$(getfirm PASSWORD)
				echo $pwd > /dev/console
				setRePasswd "$pwd"
			fi
		fi
	fi

	echo "-------------------------------------------------------------------------------------" >/dev/console
	echo "-------------------------------------------------------------------------------------" >/dev/console
	[ -f /sbin/loadqosdatabase ] && loadqosdatabase >/dev/console 2>&1
	echo "-------------------------------------------------------------------------------------" >/dev/console 2>&1

	echo "-------------------------------------------------------------------------------------" >/dev/console
	[ -f /sbin/loadopenvpncert ] && loadopenvpncert >/dev/console 2>&1
	echo "-------------------------------------------------------------------------------------" >/dev/console 2>&1

	echo "-------------------------------------------------------------------------------------" >/dev/console
	[ -f /sbin/remodel_supplement ] && remodel_supplement >/dev/console 2>&1
	echo "-------------------------------------------------------------------------------------" >/dev/console 2>&1

	if [ "A$(uci get profile.@agile_config[0].support -c /etc/profile.d)" = "Ayes" ];then
		agile_config_replace_logo
	fi	

	/sbin/network_firm
	killall -q hotplug2
	[ -x /sbin/hotplug2 ] && /sbin/hotplug2 --override --persistent \
			--set-rules-file /etc/hotplug2.rules \
			--set-coldplug-cmd /sbin/udevtrigger \
			--max-children 1 >/dev/null 2>&1 &

	# create /dev/root if it doesn't exist
	[ -e /dev/root -o -h /dev/root ] || {
		rootdev=$(awk 'BEGIN { RS=" "; FS="="; } $1 == "root" { print $2 }' < /proc/cmdline)
		[ -n "$rootdev" ] && ln -s "$rootdev" /dev/root
	}
}

stop() {
	service_stop /sbin/klogd
	[ -x /etc/init.d/logd ] && /etc/init.d/logd stop
}
