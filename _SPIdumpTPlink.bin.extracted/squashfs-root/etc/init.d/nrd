#!/bin/sh /etc/rc.common
#
# Copyright (C) 2017 Tp-link.com
# Author: Weng Kaiping <wengkaiping@tp-link.net>
# Date: 30Mar17
#

START=99

DEBUG_OUTOUT=1

SERVICE_PATH="/usr/sbin/nrd"
NRD_CONFIG_FILE="/tmp/nrd.conf"

. /lib/functions/nrd-config.sh

nrd_echo() {   
    if [ "$DEBUG_OUTOUT" -gt 0 ]; then
            echo "${1}: ""$2"> /dev/console
	fi
}

generate_config() {
    # Create configuration file and start nrd
    nrd_create_config $NRD_CONFIG_FILE 'AP' 

}

get_steering_enable() {
	local encryption_2g encryption_5g encryption_5g2
	local key_2g key_5g key_5g2
	local ssid_2g ssid_5g ssid_5g2
	local enable_2g enable_5g enable_5g2

	# AP Steering
	APSteering_enable="$onemesh_switch"

	# Band Steering
	config_load wireless
	config_get ssid_2g $ifname_2g ssid
	config_get ssid_5g $ifname_5g ssid
	[ -n $ifname_5g2 ] && config_get ssid_5g2 $ifname_5g2 ssid

	config_get encryption_2g $ifname_2g encryption
	config_get encryption_5g $ifname_5g encryption
	[ -n $ifname_5g2 ] && config_get encryption_5g2 $ifname_5g2 encryption

	config_get key_2g $ifname_2g psk_key
	config_get key_5g $ifname_5g psk_key
	[ -n $ifname_5g2 ] && config_get key_5g2 $ifname_5g2 psk_key

	config_get enable_2g $ifname_2g enable
	config_get enable_5g $ifname_5g enable
	[ -n $ifname_5g2 ] && config_get enable_5g2 $ifname_5g2 enable

	if [ "$enable_5g" = "on" -a "$ssid_2g" = "$ssid_5g" -a "$encryption_2g" = "$encryption_5g" ]; then
		if [ "$encryption_2g" = "none" -a "$encryption_5g" = "none" ] || [ "$key_2g" = "$key_5g" ]; then
			BandSteering_enable="on"
		fi
	fi

	if [ "$enable_5g2" = "on" -a "$ssid_2g" = "$ssid_5g2" -a "$encryption_2g" = "$encryption_5g2" ]; then
		if [ "$encryption_2g" = "none" -a "$encryption_5g2" = "none" ] || [ "$key_2g" = "$key_5g2" ]; then
			BandSteering_enable="on"
		fi	
	fi
}

get_wlan_ifaces() {
	local config="$1"
	config_get radio "$config" radio

	if [ "$config" = "radio_2g" ]; then
		ifname_2g="$radio"
	elif [ "$config" = "radio_5g" ]; then
		ifname_5g="$radio"
	elif [ "$config" = "radio_5g2" ]; then
		ifname_5g2="$radio"
	fi
}


start(){

	config_load 'nrd'
	config_get_bool enabled config 'Enable' '0'
	local sysmode=`uci get sysmode.sysmode.mode`
	ifname_2g=""
	ifname_5g=""
	ifname_5g2=""
    repeater_option=""
    
	# xxx_switch: switch on the UI page.
	onemesh_switch=`uci get onemesh.onemesh.enable`
	smart_switch=`uci get wireless.smart.smart_enable`
	APSteering_enable="off"
	BandSteering_enable="off"
	
	[ -z "$sysmode" ] && sysmode="router"
	[ -z "$onemesh_switch" ] && onemesh_switch="off"
	[ -z "$smart_switch" ] && smart_switch="off"

	[ "$enabled" -gt 0 ] || return 1
	[ "$sysmode" = "ap" ] && return 1
    [ "$sysmode" = "repeater" ] && repeater_option="-r"
	generate_config

	local nrd=$(pgrep "/usr/sbin/nrd" |wc -l)
	if [ "$nrd" -ge 1 ]; then
		return 1
	fi

	config_load nrd
	config_foreach get_wlan_ifaces wlanif
	get_steering_enable

	if [ "$APSteering_enable" = "on" -a "$BandSteering_enable" = "on" ];then
		option="-a -b"
	elif [ "$APSteering_enable" = "on" -a "$BandSteering_enable" = "off" ];then
		option="-a"
	elif [ "$BandSteering_enable" = "on" ];then
		option="-b"
	else
		return 1
	fi

	nrd_echo nrd "starting daemon, AP steering is $APSteering_enable, Band steering is $BandSteering_enable"	

	${SERVICE_PATH} $option $repeater_option -C "$NRD_CONFIG_FILE" &

	# Uncomment this line to send the logs to a file
	#export DBG_APPEND_FILE_PATH=/tmp/nrd.log
	#export DBG_LEVELS=all=DEBUG

}



stop() {
    nrd_echo nrd "stopping"
    local nrd_pid=`ps|grep ${SERVICE_PATH}|grep -v 'grep'|awk '{print $1}'`
    nrd_echo nrd "$nrd_pid"
    if [ -n "$nrd_pid" ];then
		for pid in $nrd_pid;do
        	kill -SIGINT "$pid"
		done
    fi
}


reload()
{
    nrd_echo nrd "reload"
    #send message to nrd to update blacklist can be replace by restart
    stop
    start
}

#service_triggers()
#{
#    procd_add_reload_trigger "nrd_blacklist" "nrd" 
#}

