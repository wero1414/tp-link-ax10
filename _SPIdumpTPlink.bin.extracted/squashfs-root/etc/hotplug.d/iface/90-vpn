#!/bin/sh
# Copyright(c) 2011-2014 Shenzhen TP-LINK Technologies Co.Ltd.
# file     90-vpn
# brief    
# author   Zhu Xianfeng<zhuxianfeng@tp-link.net>
# version  1.0.0
# date     02Dec14
# history  arg 1.0.0, 02Dec14, Zhu Xianfeng, Create the file. 

. /lib/functions.sh
. /lib/functions/network.sh

VPN_CLIENT_MARK=262144
VPN_CLIENT_MASK=262144
BRIDGE_NAME="br-lan"
VPNC_DNS_FILE=/tmp/vpnc-dns

openvpn_handle()
{
	local enabled="off"
	local proto="udp"
	local port="1194"
	local access="home"

	config_load openvpn
	config_get enabled "server" "enabled"
	config_get proto "server" "proto"
	config_get port "server" "port"
	config_get access "server" "access"

	if [ "$enabled" != "on" ]; then
		fw openvpn_block $proto $port
		return 0
	fi

	if [ "$INTERFACE" = "lan" ]; then
		/etc/init.d/openvpn restart
		return 0
	fi

	# firewall handle 
	# iptables -t filter -I INPUT 1 -i eth0 -p udp --dport 1194 -j ACCEPT
	if [ "$ACTION" = "ifup" ]; then
		fw openvpn_access $proto $port $access
	elif [ "$ACTION" = "down" ]; then 
		fw openvpn_block $proto $port $access
	fi
}

pptpvpn_handle()
{
	local enabled="off"

	config_load pptpd
	config_get enabled "pptpd" "enabled"
	config_get smbacc  "pptpd" "samba_access"

	if [ "$enabled" != "on" ]; then
		return 0
	fi

	# firewall handle
	# iptables -t filter -I INPUT 1 -p tcp --dport 1723 -j ACCEPT
	# iptables -t filter -I INPUT 1 -p gre -j ACCEPT
	if [ "$ACTION" = "ifup" ]; then
		fw pptp_access $smbacc
	elif [ "$ACTION" = "down" ]; then 
		fw pptp_block
	fi
}

l2tpvpn_handle()
{
	local enabled="off"

	config_load l2tpoveripsec
	config_get enabled "l2tpoveripsec" "enabled"
	config_get encryption "l2tpoveripsec" "encryption"

	if [ "$enabled" != "on" ]; then
		return 0;
	fi
	if [ "$ACTION" = "ifup" ]; then
		if [ "$encryption" = "true" ]; then
			/etc/init.d/ipsec restart
		fi
		/etc/init.d/xl2tpd restart
	fi
}

wireguardvpn_handle()
{
    local enabled="false"
    config_load wireguard
    config_get enabled "wireguard" "enabled"

    if [ "$enabled" != "true" ]; then
        return 0;
    fi
    rm /tmp/wg_status.lua

    if [ "$ACTION" = "ifup" ]; then
        /etc/init.d/wireguard restart
    fi
}

add_vpn_client()
{
	local access="1"
	local mac
	config_get access "$1" "access"
	config_get mac "$1" "mac"
	if [ "$access" == "on" ]; then
		vpn_mgmt "client" add "$mac"
	fi
}

vpn_client_handle()
{
	local enabled="off"
	local vpntype="none"

	if [ "$INTERFACE" != "vpn" ]; then
		return 0
	fi
	
	config_load vpn
	config_get enabled "client" "enabled"
	config_get vpntype "client" "vpntype"
    
	if [ "$enabled" == "off" -o "$vpntype" == "none" ]; then
		return 0
	fi

	if [ "$ACTION" == "ifup" ]; then
		#add ip route rules
		ip rule add fwmark $VPN_CLIENT_MARK/$VPN_CLIENT_MASK iif "$BRIDGE_NAME" table vpn
		ip route flush cache
		#network_get_ptop_gateway vpn_gw "vpn"
		network_get_ipaddr vpn_gw "vpn"
		ip route add default via $vpn_gw table vpn
		#add dns rules
		network_get_dnsserver vpn_dns vpn
		echo $vpn_dns > $VPNC_DNS_FILE
        for server in $vpn_dns; do
			iptables -t mangle -A output_rule_vpn_client -d $server/32 -p udp -m udp --dport 53 -j MARK --or-mark $VPN_CLIENT_MARK
        done
		network_get_ipaddr lan_ip "lan"
		killall vpnDnsproxy
		vpnDnsproxy $lan_ip $vpn_dns
	elif [ "$ACTION" == "ifdown" ]; then
		ip route del default table vpn
		ip rule del table vpn
		ip route flush cache
		killall vpnDnsproxy

#leave these clean job to vpn_stop, as these operations should be static not dynamic.
#iptables -t mangle -F prerouting_rule_vpn_client
#iptables -t nat -F prerouting_rule_vpn_client
	fi	
}

vpn_client_handle
if [ "$INTERFACE" != "wan" -a "$INTERFACE" != "internet" -a "$INTERFACE" != "lan" ]; then
	exit 0
fi
wireguardvpn_handle
openvpn_handle
pptpvpn_handle
l2tpvpn_handle
